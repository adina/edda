===============================================
Short Read Assembly with Meta-Velvet
===============================================

:Author: Adina Howe
:Date: December 11, 2011
:Last Updated: December 11, 2011 (Adina)

For this tutorial, we will be extending the our use of the short read de novo 
assembler Velvet by using the MetaVelvet package.  The manual for MetaVelvet
is found at http://metavelvet.dna.bio.keio.ac.jp/.  Basically, MetaVelvet
breaks apart the assembly graph into separate components based on estimated
coverage.  This strategy assumes that eads that are from the same genomes 
should have roughly the same coverage within the metagenome. 

We're going to assume you've gone through the Velvet assembler tutorial at
this point.  So let's start with installing MetaVelvet.  These commands should
look familiar.

   %% cd /mnt
   %% curl -O http://metavelvet.dna.bio.keio.ac.jp/src/MetaVelvet-1.1.01.tgz
   %% tar xvzf MetaVelvet-1.1.01.tgz.tgz
   %% cd MetaVelvet-1.1.01
   %% make ['MAXKMERLENGTH=49'] ['CATEGORIES = cat'] ['OPENMP=2']

Now, let's take the assembly we previously completed with Velvet and see
what MetaVelvet comes up with.

   %% cd /mnt
   %% MetaVelvet-1.1.01/meta-velvetg simHChc_subset.33 | tee logfile

You'll see the output of MetaVelvet within your simHChc_subset.33 directory.  


   %% python ~/Dropbox/ngs-scripts/assembly/extract-long-sequences.py 200 contigs.fa > out.fa

Finally, if you have your own dataset, you can try to assemble it on
your EC2 system.  However, you may want to check memory usage with the
top command in order to ensure that you are not using too much memory.
If the Velvet memory usage is over 90%, you may be using virtual
memory, which means the assembly will take much longer than necessary.
