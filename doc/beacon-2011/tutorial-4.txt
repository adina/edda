Tutorial 4
==========

While loops
-----------

You may have noticed on the homework solutions for week three that I posted
a solution using a 'while' loop.  What's that!?

Well,  ::

   i = 0
   while i < 10:
      i += 1

is the same as doing ::

   for i in range(10):
      pass

(Here, 'pass' is a do-nothing command.)  So you could do either::

   i = 0
   while i < 10:
      print i
      i += 1

OR ::

   for i in range(10):
      print i

for example.  (Generally I go with the one that's more compact.)

Where 'while' loops come in handy is a situation like in the homework,
where you don't already have a list or a set range of things to iterate
over.  So, in the homework, there's really no obvious simple way to do this
with a for loop::

    location = seq.find(motif)
    while location != -1:
       print location
       location = seq.find(motif, location)

A hallmark of the 'while' loop is that you usually have to initialize, or
set up, the first condition so that the while loop is executed.  Here we
do that with the first 'location = seq.find(motif)'.

Functions!
----------

Functions are blocks of re-usable code.  You've already been using
them all along -- for example, 'seq.find' is a function, as is 'len'.
Really anything that you use '(...)' after is a function (although
there are tricky distinctions like 'methods' and 'classes', but ignore
those).

Technically, using 'len' like this: 'len(seq)' is known as 'calling' len,
and the number that 'len' gives back is 'returned'.  So, if you see something
like this:

  a = len(seq)

you're **assigning the value returned by 'len' on 'seq' to the
variable 'a'**.  Simple, eh?

Anything you put between the '(' and ')' is an *argument* or *parameter* to
the function.

How do you define your own function?  You use 'def' (for 'define'):

   def f(a, b, c):
      print a
      print b
      print c

What this does is create a function named 'f' that has three parameters;
the function prints each parameter on its own line.  If you call ::

   >>> f(1, 2, 3)

you'll get ::

   1
   2
   3

printed out.  The parameters a, b, and c are just placeholders that
are replaced by whatever you put between '(...)' when you call 'f'.
Note that there's no particular significance to their names, you can
just call 'em whatever you want.

Coin flipping as a function
---------------------------

You probably got kind of tired of this code from doc:`tutorial-3`:

  >>> flips = []
  >>> for i in range(10):
  ...   if random.randint(1, 100) >= 50:
  ...      flips.append('heads')
  ...   else:
  ...      flips.append('tails')

Is there a way to put this in a function?  Sure! ::

  def flip_coins():
     flips = []
     for i in range(10):
        if random.randint(1, 100) >= 50:
            flips.append('heads')
        else:
            flips.append('tails')

     return flips.count('heads') / float(len(flips))

Now you can call flip_coins like this::

  f_heads = flip_coins()

Making coin flipping a bit more useful with refactoring
-------------------------------------------------------

Suppose you wanted to be able to change the number of times the coin
was flipped without writing a new function?  Easy!  First, introduce
a new variable 'n_times' into the function that specifies how many
times to flip the coin:

  def flip_coins():
     flips = []
     n_times = 10    ## this is new

     for i in range(n_times):   ### this is changed
        if random.randint(1, 100) >= 50:
            flips.append('heads')
        else:
            flips.append('tails')

     return flips.count('heads') / float(len(flips))

Now, when you're sure that worked, make 'n_times' a *parameter*::

  def flip_coins(n_times): 	   ## this is changed
     flips = []

     for i in range(n_times):
        if random.randint(1, 100) >= 50:
            flips.append('heads')
        else:
            flips.append('tails')

     return flips.count('heads') / float(len(flips))

and now you can call 'flip_coins(10)' to flip it 10 times, and
'flip_coins(100)' to flip it 100 times.

This kind of careful, boring, step-wise change to programs is called
*refactoring*.  It means 'changing your code without changing what it
actually does'.  Doing it in this careful, boring, step-wise manner is
by far the safest way to change code... and, lucky you, you'll get a
chance to try it out in the homework!

The Monty Hall Problem
----------------------

The Monty Hall problem, simply put, is this:

   You are a contest in a game show run by the famous Monty Hall.  The game
   show is set up like so: there are three doors, and behind one of the doors
   is A MILLION BUCKS!!!  The other two doors are empty.
   
   You choose a door, but it remains closed.
   
   Monty then opens a different door for you, and shows you that it is empty.
   
   He then asks you a question: do you switch your choice of doors to the
   other, non-opened one? Or do you stay with your first choice?

   After you make your decision (to switch, or not), he opens the door
   you have chosen, and either gives you NOTHING or A MILLIONG BUCKS!!!!
   (Hint: you WANT a MILLION BUCKS!!!!)

While it's obvious that there is no particular advantage to switching,
you wonder why Monty is asking.  So maybe there's more to the
problem!?  Rather than analyzing it, you, being a computational
scientist (and hence not that great at really analyzing things) decide
to simply simulate the problem.

I, being awesome, have written a 100%-guaranteed-to-be-correct piece
of code to do just that!

The following code (`available for text-file download here
<https://raw.github.com/ctb/edda/master/doc/beacon-2011/monty.py>`__)
can be loaded into IDLE as a '.py' file and run.  In the function
'monty_hall', it implements a Monty Hall-style game show, with the
only parameter being whether or not the player switches.  In the
function 'monte_carlo', it implements a Monte Carlo/random number
simulation that runs the monty_hall function a bunch of times and
returns the average number of times a "win" was observed. ::

   import random
   
   def monty_hall(switch):
       # first, set up the doors to be empty.  use a dictionary, so that
       # we don't have to worry about list indices or anything.
       doors = {}
   
       doors[1] = doors[2] = doors[3] = 'empty'
   
       # now, pick one (at random) to contain a million bucks.
       full_num = random.randint(1, 3)
       doors[full_num] = 'a million bucks!'
   
       # ok!  set up is done.  now, pretend we're the contestant.  pick one
       # of the doors at random.
       your_choice = random.randint(1, 3)
   
       # monty is now going to reveal one of the other doors to you.
       while True:
           monty_choice = random.randint(1, 3)
           if monty_choice != your_choice and doors[monty_choice] == 'empty':
               break
   
       # ok, now - do you switch to the other door?
       if switch:
           door_list = [1,2,3]
           door_list.remove(your_choice)
           door_list.remove(monty_choice)
           assert len(door_list) == 1
           your_choice = door_list[0]      # we'll only have one left!
   
       # now, what'd you get? 'empty' or 'a million bucks!'?
       return doors[your_choice]
   
   ###

   # run a monte carlo simulation of the monty hall problem   
   def monte_carlo(do_switch):
       results = []
       for i in range(100):
           results.append(monty_hall(do_switch))
   
       return (100 - results.count('empty'))/float(100.)
   
   # try running it with 'always switch' on.
   print monte_carlo(False)

When you run this code, do you find that it's better to always switch,
or to never switch?   Does it make a difference?  Heck, is the code
correct?  These are important questions -- a MILLION BUCKS!!! is in the
offing!

Homework 4.1 - Monty Hall/Monte Carlo refactoring
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For the below, edit the 'monty.py' file and then copy/paste the
*final* version (after #3) into the HW form.  I **strongly** recommend
doing the refactoring in the following three chunks (a, b, and c);
otherwise you will get confused, and lost, and your code will suck,
and you will cry.  (Or we will, looking at your code.)

**HW 4.1 (a)**:

In monty.py, add a variable 'n_doors' at the top of the monty_hall
function, and have the entire monty_hall function use n_doors
throughout the function.  That is, if n_doors is 3, the function
should work exactly as it does now; if n_doors is 5, then the function
should work for 5 doors.

Hint: this will involve a new 'for' loop, to initialize the 'doors'
dictionary.  You will also need to modify some parts of the 'if switch:'
code block.

**HW 4.1 (b)**:

Modify the monty_hall function so that n_doors is passed in as a
parameter.  That is, after your changes, 'monty_hall(True, 3)' should
behave exactly the same as 'monty_hall(True)' does now -- but
'monty_hall(True, 5)' should work with 5 doors instead.

**HW 4.1 (c)**:

Modify the monte_carlo function so that it takes n_doors as a
parameter, just like the monty_hall function.  So, 'monte_carlo(True,
3)' would do exactly what 'monte_carlo(True)' does now, but 'monte_carlo(True,
5)' would work with five doors.
   
.. in class: identify the line or lines where the even probability
.. becomes biased.

.. in class: diagram out all possible paths
.. how does this explode with number of doors?
