import sys, os
import json
import sqlite3

import quixote
from quixote.server.simple_server import run
from quixote.util import StaticDirectory, StaticFile
from quixote.publish import Publisher
from quixote.directory import Directory

quixote.DEFAULT_CHARSET='UTF-8'         # @CTB set properly?

###

DOCPATH='../doc/_build/html/'
COMMENTARY_PATH='../commentary-js/'
DBFILE='../comments.db'

###

thisdir = os.path.dirname(__file__)
docdir = os.path.join(thisdir, DOCPATH)
docdir = os.path.abspath(docdir)

commentary_directory = os.path.join(thisdir, COMMENTARY_PATH)
commentary_directory = os.path.abspath(commentary_directory)

_doc = StaticDirectory(docdir, index_filenames=['index.html'])
_commentary = StaticDirectory(commentary_directory)

###

dbfilepath = os.path.join(thisdir, DBFILE)
dbfilepath = os.path.abspath(dbfilepath)

db = sqlite3.connect(dbfilepath)
db.row_factory = sqlite3.Row

CREATE_SCHEMA = '''CREATE TABLE comments
    (id INTEGER PRIMARY KEY,
     comment TEXT,
     username TEXT,
     email TEXT,
     page TEXT,
     position TEXT);
'''

try:
    c = db.cursor()
    c.execute('SELECT * FROM comments LIMIT 1')
    del c
except sqlite3.OperationalError:        # db doesn't exit
    print 'creating DB/schema'
    c.execute(CREATE_SCHEMA)
    db.commit()

    for (position, comment, author, page) in (\
        ('again', 'life: again', 'titus', 'sub/foo'),
        ('this-is-a-section', 'life: this is a section', 'muika', 'sub/foo'),
        ('again', 'life: again, hello', 'titus', 'sub/foo'),):

        c.execute('INSERT INTO comments (comment, username, email, page, position) VALUES (?, ?, ?, ?, ?)', (comment, author, '', page, position))

    db.commit()


class CommentaryHandler(Directory):
    _q_exports = ['add', 'edit', 'get']

    def add(self):
        request = quixote.get_request()
        form = request.form
        
        comment = form['comment']
        position = form['position']
        username = form['username']
        email = form['email']
        page = form['page']

        db.rollback()
        c = db.cursor()
        c.execute('INSERT INTO comments (comment, position, page, username, email) VALUES (?, ?, ?, ?, ?)', (comment, position, page, username, email))
        db.commit()
        
    def edit(self):
        request = quixote.get_request()
        print 'EDIT', request.form

    def get(self):
        request = quixote.get_request()
        form = request.form
        response = quixote.get_response()

        print '**', form

        c = db.cursor()
        c.execute('SELECT * FROM comments WHERE page=?', (form['page'],))

        data = []
        for row in c.fetchall():
            print row
            data.append(dict(num=row['id'], position=row['position'],
                          comment=row['comment']))

        print data

        response.set_content_type('application/json')
        return json.dumps(data)
                

class Top(Directory):
    _q_exports = ['', 'doc', 'c', 'comments']

    def __init__(self):
        global _doc, _commentary
        self.doc = _doc
        self.c = _commentary
        self.comments = CommentaryHandler()
    
    def _q_index(self):
        request = quixote.get_request()
        response = quixote.get_response()
        response.redirect(request.get_url() + './doc/')

def create_publisher():
    app = Top()
    return Publisher(app, display_exceptions='plain')

if __name__ == '__main__':
    run(create_publisher, host='', port=8555)
